// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String      @id @default(cuid())
  username      String?     @unique
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  aliases       Alias[]
  teams         Team[]
  players       Player[]
  teamInvites   TeamInvite[]
  postLikes     PostLike[]
}

model Game {
  id      String      @id @default(cuid())
  name    String
  image   String?
  aliases Alias[]
  teams Team[]
}

model Alias {
  id     String @id @default(cuid())
  alias  String
  userId String
  gameId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  players Player[]
}

model Team {
  id          Int @id @default(autoincrement())
  name        String
  ownerId     String
  gameId      String
  logo        String?
  description String?
  players     Player[]
  invites     TeamInvite[]
  posts       Post[]

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Player {
  id          String @id @default(cuid())
  userId      String
  teamId      Int
  aliasId     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  alias Alias @relation(fields: [aliasId], references: [id], onDelete: Cascade)
}

model TeamInvite {
  id          String @id @default(cuid())
  userId      String
  teamId      Int
  created     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Post {
  id          Int @id @default(autoincrement())
  teamId      Int
  content     String
  date        DateTime @default(now())
  likes       PostLike[]

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model PostLike {
  id        String @id @default(cuid())
  postId    Int
  userId    String 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
